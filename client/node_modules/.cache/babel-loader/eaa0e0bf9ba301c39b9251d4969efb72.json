{"ast":null,"code":"var _jsxFileName = \"/Users/emanuelhernandez/dev/messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(ConversationsProvider, \"A7rfBETu6KN1Q21Ig/5PWBuEG9I=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/emanuelhernandez/dev/messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","index","recipient","contact","find","id","name","selected","value","selectedConversation","selectConversationIndex"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA2B;AAAA;;AAChC,SAAON,UAAU,CAACI,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAElD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM,CAACS,yBAAD,EAA4BC,4BAA5B,IAA4DX,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAACY,IAAAA;AAAD,MAAaV,WAAW,EAA9B;;AAEA,WAASW,kBAAT,CAA4BC,UAA5B,EAAuC;AACrCL,IAAAA,gBAAgB,CAACM,iBAAiB,IAAI;AACpC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAACD,QAAAA,UAAD;AAAaE,QAAAA,QAAQ,EAAE;AAAvB,OAAvB,CAAP;AACD,KAFe,CAAhB;AAGD;;AAED,QAAMC,sBAAsB,GAAGT,aAAa,CAACU,GAAd,CAAkB,CAACC,YAAD,EAAcC,KAAd,KAAwB;AACvE,UAAMN,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BG,SAAS,IAAG;AACzD,YAAMC,OAAO,GAAGV,QAAQ,CAACW,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;AACD,OAFe,CAAhB;AAGA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAACG,QAAAA,EAAE,EAAEH,SAAL;AAAgBI,QAAAA;AAAhB,OAAP;AACD,KANkB,CAAnB;AAOA,UAAMC,QAAQ,GAAGN,KAAK,KAAKV,yBAA3B;AACA,WAAO,EAAC,GAAGS,YAAJ;AAAkBL,MAAAA,UAAlB;AAA8BY,MAAAA;AAA9B,KAAP;AACD,GAV8B,CAA/B;AAYA,QAAMC,KAAK,GAAG;AACZnB,IAAAA,aAAa,EAAES,sBADH;AAEZW,IAAAA,oBAAoB,EAAEX,sBAAsB,CAACP,yBAAD,CAFhC;AAGZmB,IAAAA,uBAAuB,EAAElB,4BAHb;AAIZE,IAAAA;AAJY,GAAd;AAOA,sBACI,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEc,KAAtC;AAAA,cACGpB;AADH;AAAA;AAAA;AAAA;AAAA,UADJ;AAKD;;IApCeD,qB;UAE4BL,e,EAEvBC,W;;;KAJLI,qB","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations(){\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ children }) {\n  \n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const {contacts} = useContacts()\n  \n  function createConversation(recipients){\n    setConversations(prevConversations => {\n      return [...prevConversations, {recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = conversations.map((conversation,index) => {\n    const recipients = conversation.recipients.map(recipient =>{\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return {id: recipient, name}\n    })\n    const selected = index === selectedConversationIndex\n    return {...conversation, recipients, selected}\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n      <ConversationsContext.Provider value={value}>\n        {children}\n      </ConversationsContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}