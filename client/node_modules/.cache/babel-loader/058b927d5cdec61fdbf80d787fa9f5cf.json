{"ast":null,"code":"var _jsxFileName = \"/Users/emanuelhernandez/dev/messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket;\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    sendMessage,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(ConversationsProvider, \"A7rfBETu6KN1Q21Ig/5PWBuEG9I=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/emanuelhernandez/dev/messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\nimport { useSocket } from './SocketProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations(){\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  \n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const {contacts} = useContacts()\n  const socket = useSocket\n  \n  function createConversation(recipients){\n    setConversations(prevConversations => {\n      return [...prevConversations, {recipients, messages: [] }]\n    })\n  }\n\n  function addMessageToConversation({recipients, text, sender}){\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = {sender, text}\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)){\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [...prevConversations, {recipients, messages: [newMessage]}]\n      }\n    })\n  }\n\n  function sendMessage(recipients, text){\n    socket.emit('send-message', {recipients, text})\n    addMessageToConversation({recipients, text, sender: id})\n  }\n\n  const formattedConversations = conversations.map((conversation,index) => {\n    const recipients = conversation.recipients.map(recipient =>{\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return {id: recipient, name}\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return {...message, senderName: name, fromMe}\n    })\n\n    const selected = index === selectedConversationIndex\n    return {...conversation, messages, recipients, selected}\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    sendMessage,\n    createConversation\n  }\n\n  return (\n      <ConversationsContext.Provider value={value}>\n        {children}\n      </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a,b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}"]},"metadata":{},"sourceType":"module"}